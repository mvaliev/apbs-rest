name: Build and Run CLI Tools
on: 
  push:
    branches-ignore:
      - '**'
    paths:
      - '.github/workflows/cli.yaml'
      - 'cli/**'
      - '!cli/README.md'
      - 'tests/cli/**'
      - 'utilities/wait_for_deployments.py'
      # - 'tests/requirements.txt'
      # - 'src/*'
  pull_request:
    paths:
      - '.github/workflows/cli.yaml'
      - 'cli/**'
      - '!cli/README.md'
      - 'tests/cli/**'
      - 'utilities/wait_for_deployments.py'

jobs:

  job_1:
    name: Build CLI Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      shell: bash
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
    # Build the executables/binaries for the respective OS
    # TODO: build Windows binaries
    # TODO: upload Windows binaries
    # TODO: upload macOS binaries
    - name: (Unix) Build the binaries
      if: matrix.os != 'windows-latest'
      working-directory: ./cli/bin
      run: |
        go build -v -o apbs ../apbs/
        go build -v -o pdb2pqr ../pdb2pqr/

    - name: (Unix) Verify Installations
      if: matrix.os != 'windows-latest'
      working-directory: ./cli/bin
      run: |
        ./apbs -h
        ./pdb2pqr -h

    - name: (Unix) Upload APBS binarY for later use
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v1
      with:
        name: apbs_${{ matrix.os }}
        path: cli/bin/apbs
    - name: (Unix) Upload PDB2PQR binary for later use
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v1
      with:
        name: pdb2pqr_${{ matrix.os }}
        path: cli/bin/pdb2pqr

  job_2:
    name: Install Software Dependencies
    needs: job_1
    # env:
    #   MINIKUBE_VERSION: 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        # os: [ubuntu-latest, windows-latest]
    steps:
    - name: Git checkout APBS-REST codebase
      uses: actions/checkout@v1

    - name: (Linux) Install Minikube
      if: matrix.os == 'ubuntu-latest'
      uses: CodingNagger/minikube-setup-action@v1.0.2
      with:
        minikube-version: 1.4.0
        k8s-version: 1.16.0
      id: minikube
    
    # - name: (Windows) Install Minikube
    #   if: matrix.os == 'windows-latest'
    #   shell: bash
    #   run: choco install minikube

    - name: (Unix) Launch Minikube
      if: matrix.os != 'windows-latest'
      run: eval ${{ steps.minikube.outputs.launcher }}

    # - name: (Windows) Launch Minikube
    #   if: matrix.os == 'windows-latest'
    #   shell: bash
    #   run: minikube start --memory=4096mb

    # - name: (Windows) Check for Hyper-V
    #   if: matrix.os == 'windows-latest'
    #   shell: bash
    #   run: systeminfo

    # - name: (Windows) List available clusters
    #   if: matrix.os == 'windows-latest'
    #   shell: bash
    #   run: |
    #     kubectl config view

    # Install Helm v3 for the respective OS
    - name: (Linux) Download Helm v3
      if: matrix.os != 'windows-latest'
      run: |
        wget https://get.helm.sh/helm-v3.0.0-linux-amd64.tar.gz
        gunzip helm-v3.0.0-linux-amd64.tar.gz
        tar -xvf helm-v3.0.0-linux-amd64.tar
        mv linux-amd64/ helm-v3
    
    # - name: (Windows) Download Helm v3
    #   if: matrix.os == 'windows-latest'
    #   shell: bash
    #   run: |
    #     curl -O -L https://get.helm.sh/helm-v3.0.0-windows-amd64.zip
    #     unzip helm-v3.0.0-windows-amd64.zip
    #     mv windows-amd64/ helm-v3

    # Install APBS-REST chart through Helm
    - name: (Unix) Install APBS-REST via Helm
      if: matrix.os != 'windows-latest'
      run: |
        sudo minikube addons enable ingress
        sudo ./helm-v3/helm install apbs-rest charts/apbs-rest --set ingress.enabled=true,ingress.hosts[0]=apbs.$(minikube ip).nip.io
        # helm install charts/apbs-rest -n apbs-rest --set ingress.enabled=true,ingress.hosts[0]=apbs.$(minikube ip).xip.io

    # - name: (Windows) Install APBS-REST via Helm
    #   if: matrix.os == 'windows-latest'
    #   shell: bash
    #   run: |
    #     minikube addons enable ingress
    #     ./helm-v3/helm.exe install apbs-rest charts/apbs-rest --set ingress.enabled=true,ingress.hosts[0]=apbs.$(minikube ip).xip.io

    # - name: Wait for pods
    #   if: matrix.os != 'windows-latest'
    #   uses: CodingNagger/minikube-wait-action@v1.0.1

    # TODO: remove condition once a k8s setup is figured out for the Windows build
    - name: Wait for Deployments
      if: matrix.os != 'windows-latest'
      run: python3 utilities/wait_for_deployments.py 30 10

    # TODO: download Linux binaries to run/compare results
    # TODO: download macOS binaries to run/compare results
    - name: (Unix) Download APBS binary
      if: matrix.os != 'windows-latest'
      uses: actions/download-artifact@v1
      with:
        name: apbs_${{ matrix.os }}

    - name: (Unix) Download PDB2PQR binary
      if: matrix.os != 'windows-latest'
      uses: actions/download-artifact@v1
      with:
        name: pdb2pqr_${{ matrix.os }}
      
    - name: (Unix) Run APBS
      if: matrix.os != 'windows-latest'
      run: |
        mv apbs_${{ matrix.os }}/apbs ./cli/bin/
        sudo chmod +x ./cli/bin/apbs
        cd ./tests/cli/test-output/apbs/
        cp ../../../sample_input/1fas.pqr .
        APBS_HOST=apbs.$(minikube ip).nip.io ../../../../cli/bin/apbs ../../../sample_input/1fas.in

    - name: (Unix) Run PDB2PQR
      if: matrix.os != 'windows-latest'
      run: |
        mv pdb2pqr_${{ matrix.os }}/pdb2pqr ./cli/bin/
        sudo chmod +x ./cli/bin/pdb2pqr
        cd ./tests/cli/test-output/pdb2pqr/
        cp ../../../sample_input/1fas.pqr .
        APBS_HOST=apbs.$(minikube ip).nip.io ../../../../cli/bin/pdb2pqr --with-ph=7.0 --ph-calc-method=propka --apbs-input --ff=parse --verbose ../../../sample_input/1fas.pdb 1fas.pqr
    
    - name: (Unix) Look for expected APBS/PDB2PQR files
      if: matrix.os != 'windows-latest'
      run: |
        cd ./tests/cli/test-output/pdb2pqr/
        find 1fas.in 1fas.pqr 1fas.propka 1fas-input.json pdb2pqr_stderr.txt pdb2pqr_stdout.txt
        cd ../apbs/
        find 1fas.pqr.dx  apbs_stderr.txt  apbs_stdout.txt  io.mc



    # TODO: download Windows binaries to run/compare results
